#version 450 core

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D slimeImg;

struct SlimeDescriptor {
    uvec4 randState;
    vec2 pos;
    uint speciesIndex;
    float angle;
}; // Size will be rounded up to the next multiple of the largest member (vec4) -> 32 Bytes

struct SpeciesDescriptor {
    vec4 color; // Offset: 0-15
    float moveSpeed;
    float turnSpeed;

    float sensorAngleDegrees;
	float sensorOffsetDst;
    int sensorSize;

    float padding0;
    vec2 padding1;
    vec4 padding2;
}; // Size will be rounded up to the next multiple of the largest member (vec4) -> 64 Bytes

layout(std430, binding = 1) buffer bufSlime { SlimeDescriptor slimes[]; };
layout(std430, binding = 2) buffer bufSpecies { SpeciesDescriptor species[]; };
layout(std430, binding = 3) buffer bufAttr {
    int worldSizeX;
    int worldSizeY;
};

// ------------------------------------------------------------------------------------
// 128 Bit XOR-Shift
// Source: https://en.wikipedia.org/wiki/Xorshift
// ------------------------------------------------------------------------------------
uint next(inout uvec4 state) {
	uint t = state.w;
    uint s = state.x;
	state.w = state.z;
	state.z = state.y;
	state.y = s;

	t ^= t << 11;
	t ^= t >> 8;
    state.x = t ^ s ^ (s >> 19);
	return state.x;
}

float next_float(inout uvec4 state) {
    // Division from: https://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/
    return float(next(state)) * (1.0 / 4294967296.0);
}

uint next(inout uvec4 state, uint min, uint max) {
    return uint(round(float(min) + (next_float(state) * float(max - min))));
}

// ------------------------------------------------------------------------------------
vec2 rotate(vec2 v, float a) {
	float s = sin(a);
	float c = cos(a);
	mat2 m = mat2(c, -s, s, c);
	return m * v;
}

float dot_product(vec2 v1, vec2 v2) {
    return (v1.x * v2.x) + (v1.y * v2.y);
}

float NC_PI = 3.1415926;
float get_vec_dist_degree(vec2 v1, vec2 v2) {
    float dotProd = dot_product(v1, v2);
    float angle = acos((dotProd/(length(v1)*length(v2))));
    return angle * (180/NC_PI);
}

float sense(uint index, uint speciesIndex, float sensorAngleOffset) {
	float sensorAngle = slimes[index].angle + sensorAngleOffset;
	vec2 sensorDir = vec2(cos(sensorAngle), sin(sensorAngle));

	vec2 sensorPos = slimes[index].pos + sensorDir * species[speciesIndex].sensorOffsetDst;
	int sensorCentreX = int(round(sensorPos.x));
	int sensorCentreY = int(round(sensorPos.y));

	float sum = 0;

	// int4 senseWeight = slimes[index].speciesMask * 2 - 1;
    ivec4 senseWeight = ivec4(1);

    int sensorSize = species[speciesIndex].sensorSize;
	for (int offsetX = -sensorSize; offsetX <= sensorSize; offsetX ++) {
		for (int offsetY = -sensorSize; offsetY <= sensorSize; offsetY ++) {
			int sampleX = min(worldSizeX - 1, max(0, sensorCentreX + offsetX));
			int sampleY = min(worldSizeY - 1, max(0, sensorCentreY + offsetY));
            ivec2 texelCoord = ivec2(sampleX, sampleY);
            vec4 pixel = imageLoad(slimeImg, texelCoord);
			sum += dot(senseWeight, pixel);
		}
	}

	return sum;
}

void move(uint index) {
	vec2 sPos = slimes[index].pos;
    uint speciesIndex = slimes[index].speciesIndex;

	// Steer based on sensory data
	float sensorAngleRad = species[speciesIndex].sensorAngleDegrees * (3.1415 / 180);
	float weightForward = sense(index, speciesIndex, 0);
	float weightLeft = sense(index, speciesIndex, sensorAngleRad);
	float weightRight = sense(index, speciesIndex, -sensorAngleRad);

	float randomSteerStrength = next_float(slimes[index].randState);
	float turnSpeed = species[speciesIndex].turnSpeed * 2 * 3.1415;

	// Continue in same direction
	if (weightForward > weightLeft && weightForward > weightRight) {
		slimes[index].angle += 0;
	}
	else if (weightForward < weightLeft && weightForward < weightRight) {
		slimes[index].angle += (randomSteerStrength - 0.5) * 2 * turnSpeed;
	}
	// Turn right
	else if (weightRight > weightLeft) {
		slimes[index].angle -= randomSteerStrength * turnSpeed;
	}
	// Turn left
	else if (weightLeft > weightRight) {
		slimes[index].angle += randomSteerStrength * turnSpeed;
	}


	// Update position
	vec2 direction = vec2(cos(slimes[index].angle), sin(slimes[index].angle));
	vec2 newPos = sPos + direction * species[speciesIndex].moveSpeed;

	
	// Clamp position to map boundaries, and pick new random move dir if hit boundary
	if (newPos.x < 0 || newPos.x >= worldSizeX || newPos.y < 0 || newPos.y >= worldSizeY) {
		float randomAngle = next_float(slimes[index].randState) * 2 * 3.1415;

		newPos.x = min(worldSizeX - 1 ,max(0, newPos.x));
		newPos.y = min(worldSizeY - 1, max(0, newPos.y));
		slimes[index].angle = randomAngle;
	}
	
	slimes[index].pos = newPos;
}

void draw(uint index) {
    uint speciesIndex = slimes[index].speciesIndex;
    ivec2 texelCoord = ivec2(round(slimes[index].pos.x), round(slimes[index].pos.y));
    imageStore(slimeImg, texelCoord, species[speciesIndex].color);
}

void main() {
    uint index = gl_GlobalInvocationID.x;

    move(index);
    draw(index);
}